

// Centrar y dar un ancho m√°ximo igual a $pagemaxwidth.
@mixin max-width($max-width : $pagemaxwidth)  {
	margin-left:auto;
	margin-right:auto;
	max-width: $max-width;
	width:100%;
}

// .bordered(COLOR, COLOR, COLOR, COLOR);
@mixin bordered($top-color: #eee, $right-color: #eee, $bottom-color: #eee, $left-color: #eee) {
	border-top 		: solid 1px $top-color;
	border-left 	: solid 1px $left-color;
	border-right 	: solid 1px $right-color;
	border-bottom : solid 1px $bottom-color;
}

// .box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	box-shadow 				 : $shadow;
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow 		 ($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	box-shadow         : 	$x-axis 		$y-axis 			$blur 			rgba(0, 0, 0, $alpha);
}

// .opacity(VALUE);
@mixin opacity ($opacity : .5) {
	opacity 		: $opacity;
}


//          	$Transform              \\
// ___________________________________//



// .rotate(VALUEdeg);
@mixin rotate($deg) {
	-webkit-transform : rotate($deg);
	-ms-transform 		: rotate($deg);
	transform 				: rotate($deg);
}

// .scale(VALUE);
@mixin scale($ratio) {
	-webkit-transform : scale($ratio);
	-ms-transform 		: scale($ratio);
	transform  				: scale($ratio);
}

// .skew(VALUE, VALUE);
@mixin skew($x: 0, $y: 0) {
	-webkit-transform : skew($x, $y);
	-ms-transform 		: skew($x, $y);
	transform 				: skew($x, $y);
}

// .translate(VALUE, VALUE)
@mixin translate($x: 0, $y: 0) {
	-webkit-transform : translate($x, $y);
	-ms-transform 		: translate($x, $y);
	transform 				: translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	-webkit-transform : translate3d($x, $y, $z);
	-ms-transform : translate3d($x, $y, $z);
	transform 			: translate3d($x, $y, $z);
}



//          	$Transition             \\
// ___________________________________//

// transition: <property> || <duration> || <timing-function> || <delay> [, ...];
@mixin transition($transition) {
	-webkit-transition : $transition;
	transition 				 : $transition;
}

// Example of use
 	// SCSS Mixin
		// .box {
		// 		@include transition(width 2s, height 2s, background-color 2s, transform 2s);
		//  	&:hover {
		// 			@include rotate(180deg);
		//	 }
		// }
	// CSS Code
		// .box {
		//     width: 100px;
		//     height: 100px;
		//     background-color: #0000FF;
		//     -webkit-transition:width 2s, height 2s, background-color 2s, -webkit-transform 2s;
		//     transition:width 2s, height 2s, background-color 2s, transform 2s;
		// }
		// .box:hover {
		//     background-color: #FFCCCC;
		//     width:200px;
		//     height:200px;
		//     -webkit-transform:rotate(180deg);
		//     transform:rotate(180deg);
		// }



// .background-alpha(VALUE VALUE);
@mixin background-alpha($color: $white, $alpha: 1) {
	background-color : hsla(hue($color), saturation($color), lightness($color), $alpha);
}



// .resize(VALUE) (none, both, horizontal, vertical, inherit)
@mixin resize($direction: both) {
	resize : $direction;
	overflow : auto;
}

// .columns(250px, 0, 24px, COLOR, solid, 1px)

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #eee, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	-webkit-column-width : $colwidth;
	-webkit-column-count : $colcount;
	-webkit-column-gap : $colgap;
	-webkit-column-rule-color : $columnRuleColor;
	-webkit-column-rule-style : $columnRuleStyle;
	-webkit-column-rule-width : $columnRuleWidth;
	-moz-column-width : $colwidth;
	-moz-column-count : $colcount;
	-moz-column-gap : $colgap;
	-moz-column-rule-color : $columnRuleColor;
	-moz-column-rule-style : $columnRuleStyle;
	-moz-column-rule-width : $columnRuleWidth;
	column-width : $colwidth;
	column-count : $colcount;
	column-gap : $colgap;
	column-rule-color : $columnRuleColor;
	column-rule-style : $columnRuleStyle;
	column-rule-width : $columnRuleWidth;
}

	
//        			$Vendor               \\
// ___________________________________//

	// Prefix for browser compatibility
	// Example of use
	  // SCSS Mixin
	  //     .mydiv {
	  //        @include vendor(box-sizing, border-box);
	  //     }
	  // CSS Code
		// 		 .mydiv {
		// 				-webkit-box-sizing: border-box;
	 	//       		 -moz-box-sizing: border-box;
	 	//        	  -ms-box-sizing: border-box;
	 	//        		 -o-box-sizing: border-box;
		//          		  box-sizing: border-box;
		//		 }

@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


//        $Background Colors          \\
// ___________________________________//

//*This mixin allow you to generate
//*the background color of a maplist in a type element


@mixin bg-colors($map-list) {
	@each $name, $color in $map-list {
		&--#{$name} {
			background-color: $color;    
		}
	}
}
	
	// Example of use
		// $notifications is a maplist variable defined in _colors.scss
	  // SCSS Mixin
	  //     .btn {
	  //        @include bg-colors($notifications)
	  //     }
	  // CSS Code
	 	// 		 .btn--default {
		//   		 background-color: #52bab3; 
		// 		 }
		// 		 .btn--success {
		//   		 background-color: #5ece7f; 
		// 		 }
		// 		 .btn--error {
		//   		 background-color: #e67478; 
		// 		 }
		// 		 .btn--warning {
		//   		 background-color: #ff784f; 
		// 		 }
		// 		 .btn--info {
		//   		 background-color: #9279c3; 
		// 		 }


//        $Pseudo Elements            \\
// ___________________________________//

@mixin pel($element, $element-w: null, $element-h: null) {
	@if $element == "before" or $element == "after" {
	  &:#{$element} {

	    @extend %pseudos;
	    width 	: $element-w;
	    height 	: $element-h;
	    @content;
	  } 
	}
	@else {
		@warn "'#{$element}' is not a valid pseudo element, should be 'before' or 'after'.";
	}
}
   
// Example of use
		// Pseudo Element should be Before or After
	  // SCSS Mixin
	  //     .btn {
	  //        @include pel(before,30px,5px)
	  //     }
	  // CSS Code
	 	// 		 .btn:before {
		//		 		display: block;
		//	  		content: ""; 
		//	  		position: absolute;
		//   		  width : 30px;
	  //			  height:  5px; 
		// 		  }

		

//        $Background Map Colors      \\
// ___________________________________//


@mixin bg-colors($map) {
  @each $color-name, $color in $map {
    @if not map-has-key($map, $color-name) {
      @warn "'#{$color-name}' is not a valid color name. Probably the ClassName in the HTML is not written correctly, or the variable doesn't exist. Add it manually and contact with us to include it in future version. Thanks";
    }

    @else {
      &--#{$color-name} {
        background-color: $color;
      }
    } 
  }
}



@mixin bg-colors--hover($map) {
  @each $color-name, $color in $map {
    @if not map-has-key($map, $color-name) {
      @warn "'#{$color-name}' is not a valid color name. Probably the ClassName in the HTML is not written correctly, or the variable doesn't exist. Add it manually and contact with us to include it in future version. Thanks";
    }

    @else {
      &--#{$color-name}:hover {
        background-color: lighten($color, 5%);
        .btn__bg {
          @include vertical(lighten($color, 15%), darken($color, 7%));
        }
      }
    } 
  }
}

@mixin border-bottom($map) {
  @each $color-name, $color in $map {
    @if not map-has-key($map, $color-name) {
      @warn "'#{$color-name}' is not a valid color name. Probably the ClassName in the HTML is not written correctly, or the variable doesn't exist. Add it manually and contact with us to include it in future version. Thanks";
    }

    @else {
      &--#{$color-name} {
        border-bottom: 3px solid darken($color, 10%);
        &:hover {
          border-bottom-width: 2px;
          margin-top: 1px;
        }
        &:active,
        &:focus  {
          border-bottom-width: 1px;
          margin-top: 2px;
        }
      }
    } 
  }
}

@mixin alerts($map) {
  @each $color-name, $color in $map {
    @if not map-has-key($map, $color-name) {
      @warn "'#{$color-name}' is not a valid color name. Probably the ClassName in the HTML is not written correctly, or the variable doesn't exist. Add it manually and contact with us to include it in future version. Thanks";
    }

    @else {
    	&--#{$color-name} {
    		color: darken($color, 50%);
    		background-color: $color;
    		border-color: darken($color, 20%);
    	}
      &--#{$color-name}:hover {
        background-color: darken($color, 15%);
      }
    } 
  }
}